//Use Recursion to Create a Range of Numbers
// some life notes : macbook is down and will be back up on sunday, looking to a full week of coding
//                  I've already gone through this portiton of javascript on freecodecamp on a different account and i'm trying to catch up on my main
// thank you for checking out what i've been doing :D


// We have defined a function named rangeOfNumbers with two parameters. The function should return an array of
// integers which begins with a number represented by the startNum parameter and ends with a number represented by the 
// endNum parameter. The starting number will always be less than or equal to the ending number. Your function must use
// recursion by calling itself nd not use loops of any kind. It should also work for cases where both startNum and 
// endNum are the same.

// TEST

// Your function should return an array.
// Your code should not use any loop syntax (for or while or higher order functions such as forEach, map, 
// filter, or reduce).
// rangeOfNumbers should use recursion (call itself) to solve this challenge.
// rangeOfNumbers(1, 5) should return [1, 2, 3, 4, 5].
// rangeOfNumbers(6, 9) should return [6, 7, 8, 9].
// rangeOfNumbers(4, 4) should return [4].


// showing a breakdown 

//  The function should return an array of integers which begins with a number represented by the startNum parameter 

// and ends with a number represented by the endNum parameter. 


// The starting number will always be less than or equal to the ending number. 

// Your function must use recursion by calling itself and not use loops of any kind. 


// It should also work for cases where both startNum and endNum are the same.



function rangeOfNumbers(startNum, endNum) {

//lets try a if statement to see if endNum - startNum = 0
// example 22 - 15 = 7
  if(endNum - startNum === 0){
    return [startNum];
  }
  return [];
};
